
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\012\000\002\002" +
    "\007\000\002\002\007\000\002\002\005\000\002\011\004" +
    "\000\002\010\004\000\002\010\005\000\002\003\003\000" +
    "\002\003\005\000\002\005\006\000\002\004\004\000\002" +
    "\004\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\007\000\002\006\011\000\002\006\006\000\002\007\003" +
    "\000\002\007\005\000\002\007\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\005\000\002\007\003\000\002\007\006\000\002\007\006" +
    "\000\002\007\010\000\002\007\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\021\004\001\002\000\004\047\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\006\010\010\011\022\012\001\002\000\004\047" +
    "\017\001\002\000\012\016\032\023\030\025\026\047\031" +
    "\001\002\000\004\045\016\001\002\000\004\002\ufffd\001" +
    "\002\000\004\010\011\001\002\000\004\005\023\001\002" +
    "\000\004\047\017\001\002\000\012\004\021\005\ufff9\007" +
    "\ufff9\010\ufff9\001\002\000\004\005\ufffc\001\002\000\004" +
    "\047\017\001\002\000\010\005\ufff8\007\ufff8\010\ufff8\001" +
    "\002\000\006\010\ufffb\045\016\001\002\000\004\010\ufffa" +
    "\001\002\000\004\002\uffff\001\002\000\004\006\143\001" +
    "\002\000\004\005\141\001\002\000\012\016\032\023\030" +
    "\025\026\047\031\001\002\000\004\012\134\001\002\000" +
    "\034\006\047\015\053\027\040\031\041\032\051\033\042" +
    "\034\036\035\043\042\046\044\050\046\045\047\037\050" +
    "\052\001\002\000\004\011\034\001\002\000\004\005\035" +
    "\001\002\000\004\002\ufff7\001\002\000\004\006\131\001" +
    "\002\000\034\004\uffef\005\uffef\007\uffef\013\uffef\014\uffef" +
    "\017\uffef\026\uffef\027\uffef\030\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\001\002\000\034\006\047\015\053\027\040" +
    "\031\041\032\051\033\042\034\036\035\043\042\046\044" +
    "\050\046\045\047\037\050\052\001\002\000\004\006\125" +
    "\001\002\000\004\006\122\001\002\000\004\006\117\001" +
    "\002\000\026\013\055\014\065\017\111\026\060\027\056" +
    "\030\064\036\062\037\061\040\057\041\063\001\002\000" +
    "\034\004\uffe0\005\uffe0\007\uffe0\013\uffe0\014\uffe0\017\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\001\002\000\004\006\106\001\002\000\034\006\047" +
    "\015\053\027\040\031\041\032\051\033\042\034\036\035" +
    "\043\042\046\044\050\046\045\047\037\050\052\001\002" +
    "\000\034\004\uffed\005\uffed\007\uffed\013\uffed\014\uffed\017" +
    "\uffed\026\uffed\027\uffed\030\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\001\002\000\004\006\077\001\002\000\034\004" +
    "\uffe4\005\uffe4\007\uffe4\013\uffe4\014\uffe4\017\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001" +
    "\002\000\034\006\047\015\053\027\040\031\041\032\051" +
    "\033\042\034\036\035\043\042\046\044\050\046\045\047" +
    "\037\050\052\001\002\000\034\004\uffdd\005\uffdd\007\uffdd" +
    "\013\uffdd\014\uffdd\017\uffdd\026\060\027\056\030\064\036" +
    "\062\037\061\040\057\041\063\001\002\000\034\006\047" +
    "\015\053\027\040\031\041\032\051\033\042\034\036\035" +
    "\043\042\046\044\050\046\045\047\037\050\052\001\002" +
    "\000\034\006\047\015\053\027\040\031\041\032\051\033" +
    "\042\034\036\035\043\042\046\044\050\046\045\047\037" +
    "\050\052\001\002\000\034\006\047\015\053\027\040\031" +
    "\041\032\051\033\042\034\036\035\043\042\046\044\050" +
    "\046\045\047\037\050\052\001\002\000\034\006\047\015" +
    "\053\027\040\031\041\032\051\033\042\034\036\035\043" +
    "\042\046\044\050\046\045\047\037\050\052\001\002\000" +
    "\034\006\047\015\053\027\040\031\041\032\051\033\042" +
    "\034\036\035\043\042\046\044\050\046\045\047\037\050" +
    "\052\001\002\000\034\006\047\015\053\027\040\031\041" +
    "\032\051\033\042\034\036\035\043\042\046\044\050\046" +
    "\045\047\037\050\052\001\002\000\034\006\047\015\053" +
    "\027\040\031\041\032\051\033\042\034\036\035\043\042" +
    "\046\044\050\046\045\047\037\050\052\001\002\000\034" +
    "\006\047\015\053\027\040\031\041\032\051\033\042\034" +
    "\036\035\043\042\046\044\050\046\045\047\037\050\052" +
    "\001\002\000\034\006\047\015\053\027\040\031\041\032" +
    "\051\033\042\034\036\035\043\042\046\044\050\046\045" +
    "\047\037\050\052\001\002\000\034\004\uffde\005\uffde\007" +
    "\uffde\013\055\014\uffde\017\uffde\026\060\027\056\030\064" +
    "\036\062\037\061\040\057\041\063\001\002\000\034\004" +
    "\uffea\005\uffea\007\uffea\013\uffea\014\uffea\017\uffea\026\uffea" +
    "\027\uffea\030\uffea\036\uffea\037\uffea\040\uffea\041\uffea\001" +
    "\002\000\034\004\uffdc\005\uffdc\007\uffdc\013\uffdc\014\uffdc" +
    "\017\uffdc\026\060\027\056\030\064\036\062\037\061\040" +
    "\057\041\uffdc\001\002\000\034\004\uffe5\005\uffe5\007\uffe5" +
    "\013\uffe5\014\uffe5\017\uffe5\026\uffe5\027\uffe5\030\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000\034\004\uffdb" +
    "\005\uffdb\007\uffdb\013\uffdb\014\uffdb\017\uffdb\026\060\027" +
    "\056\030\064\036\062\037\uffdb\040\uffdb\041\uffdb\001\002" +
    "\000\034\004\uffec\005\uffec\007\uffec\013\uffec\014\uffec\017" +
    "\uffec\026\uffec\027\uffec\030\064\036\062\037\uffec\040\uffec" +
    "\041\uffec\001\002\000\034\004\uffda\005\uffda\007\uffda\013" +
    "\uffda\014\uffda\017\uffda\026\060\027\056\030\064\036\062" +
    "\037\uffda\040\uffda\041\uffda\001\002\000\034\004\uffeb\005" +
    "\uffeb\007\uffeb\013\uffeb\014\uffeb\017\uffeb\026\uffeb\027\uffeb" +
    "\030\064\036\062\037\uffeb\040\uffeb\041\uffeb\001\002\000" +
    "\034\004\uffdf\005\uffdf\007\uffdf\013\uffdf\014\uffdf\017\uffdf" +
    "\026\060\027\056\030\064\036\062\037\061\040\057\041" +
    "\063\001\002\000\034\006\047\015\053\027\040\031\041" +
    "\032\051\033\042\034\036\035\043\042\046\044\050\046" +
    "\045\047\037\050\052\001\002\000\026\004\101\013\055" +
    "\014\065\026\060\027\056\030\064\036\062\037\061\040" +
    "\057\041\063\001\002\000\004\044\102\001\002\000\004" +
    "\007\103\001\002\000\034\004\uffe1\005\uffe1\007\uffe1\013" +
    "\uffe1\014\uffe1\017\uffe1\026\uffe1\027\uffe1\030\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\001\002\000\026\007\105\013" +
    "\055\014\065\026\060\027\056\030\064\036\062\037\061" +
    "\040\057\041\063\001\002\000\034\004\uffee\005\uffee\007" +
    "\uffee\013\uffee\014\uffee\017\uffee\026\uffee\027\uffee\030\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\001\002\000\034\006" +
    "\047\015\053\027\040\031\041\032\051\033\042\034\036" +
    "\035\043\042\046\044\050\046\045\047\037\050\052\001" +
    "\002\000\026\007\110\013\055\014\065\026\060\027\056" +
    "\030\064\036\062\037\061\040\057\041\063\001\002\000" +
    "\034\004\uffe3\005\uffe3\007\uffe3\013\uffe3\014\uffe3\017\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\001\002\000\012\016\032\023\030\025\026\047\031" +
    "\001\002\000\006\011\114\020\113\001\002\000\012\016" +
    "\032\023\030\025\026\047\031\001\002\000\004\005\ufff2" +
    "\001\002\000\004\011\116\001\002\000\004\005\ufff1\001" +
    "\002\000\034\006\047\015\053\027\040\031\041\032\051" +
    "\033\042\034\036\035\043\042\046\044\050\046\045\047" +
    "\037\050\052\001\002\000\026\007\121\013\055\014\065" +
    "\026\060\027\056\030\064\036\062\037\061\040\057\041" +
    "\063\001\002\000\034\004\uffe6\005\uffe6\007\uffe6\013\uffe6" +
    "\014\uffe6\017\uffe6\026\uffe6\027\uffe6\030\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\034\006\047\015\053" +
    "\027\040\031\041\032\051\033\042\034\036\035\043\042" +
    "\046\044\050\046\045\047\037\050\052\001\002\000\026" +
    "\007\124\013\055\014\065\026\060\027\056\030\064\036" +
    "\062\037\061\040\057\041\063\001\002\000\034\004\uffe8" +
    "\005\uffe8\007\uffe8\013\uffe8\014\uffe8\017\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002" +
    "\000\034\006\047\015\053\027\040\031\041\032\051\033" +
    "\042\034\036\035\043\042\046\044\050\046\045\047\037" +
    "\050\052\001\002\000\026\007\127\013\055\014\065\026" +
    "\060\027\056\030\064\036\062\037\061\040\057\041\063" +
    "\001\002\000\034\004\uffe2\005\uffe2\007\uffe2\013\uffe2\014" +
    "\uffe2\017\uffe2\026\uffe2\027\uffe2\030\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\001\002\000\034\004\uffe9\005\uffe9\007" +
    "\uffe9\013\uffe9\014\uffe9\017\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002\000\034\006" +
    "\047\015\053\027\040\031\041\032\051\033\042\034\036" +
    "\035\043\042\046\044\050\046\045\047\037\050\052\001" +
    "\002\000\026\007\133\013\055\014\065\026\060\027\056" +
    "\030\064\036\062\037\061\040\057\041\063\001\002\000" +
    "\034\004\uffe7\005\uffe7\007\uffe7\013\uffe7\014\uffe7\017\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\001\002\000\034\006\047\015\053\027\040\031\041" +
    "\032\051\033\042\034\036\035\043\042\046\044\050\046" +
    "\045\047\037\050\052\001\002\000\026\005\ufff4\013\055" +
    "\014\065\026\060\027\056\030\064\036\062\037\061\040" +
    "\057\041\063\001\002\000\004\024\137\001\002\000\034" +
    "\006\047\015\053\027\040\031\041\032\051\033\042\034" +
    "\036\035\043\042\046\044\050\046\045\047\037\050\052" +
    "\001\002\000\026\005\ufff0\013\055\014\065\026\060\027" +
    "\056\030\064\036\062\037\061\040\057\041\063\001\002" +
    "\000\020\011\ufff6\016\032\020\ufff6\023\030\024\ufff6\025" +
    "\026\047\031\001\002\000\010\011\ufff5\020\ufff5\024\ufff5" +
    "\001\002\000\034\006\047\015\053\027\040\031\041\032" +
    "\051\033\042\034\036\035\043\042\046\044\050\046\045" +
    "\047\037\050\052\001\002\000\026\007\145\013\055\014" +
    "\065\026\060\027\056\030\064\036\062\037\061\040\057" +
    "\041\063\001\002\000\004\005\ufff3\001\002\000\006\007" +
    "\147\010\011\001\002\000\004\022\151\001\002\000\004" +
    "\002\ufffe\001\002\000\004\045\016\001\002\000\004\010" +
    "\011\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\012\001\001" +
    "\000\004\003\145\001\001\000\006\004\032\006\026\001" +
    "\001\000\006\010\013\011\014\001\001\000\002\001\001" +
    "\000\004\005\024\001\001\000\002\001\001\000\004\003" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\021\001\001\000\002\001\001\000\006\010\023\011" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\135\006\026\001" +
    "\001\000\002\001\001\000\004\007\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\053\001\001\000\002\001\001\000\004" +
    "\007\075\001\001\000\004\007\074\001\001\000\004\007" +
    "\073\001\001\000\004\007\072\001\001\000\004\007\071" +
    "\001\001\000\004\007\070\001\001\000\004\007\067\001" +
    "\001\000\004\007\066\001\001\000\004\007\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\111\006\026\001\001\000\002\001" +
    "\001\000\006\004\114\006\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\137\001\001\000\002\001" +
    "\001\000\006\004\141\006\026\001\001\000\002\001\001" +
    "\000\004\007\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\151\011\014\001\001\000\004\005" +
    "\152\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s) {
  report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
  java.lang.Exception {
  report_fatal_error("", null);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= PROG IDENT PAREN IdentList TESIS DECL LDecl Body 
            {
              Prog RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int identListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdentList identList = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int LDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int LDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LDecl LDecl = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body body = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgN1(ident,identList,LDecl,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Prog ::= PROG IDENT DECL LDecl Body 
            {
              Prog RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int LDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int LDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LDecl LDecl = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body body = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgN2(ident,LDecl,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Prog ::= PROG IDENT PAREN IdentList Body 
            {
              Prog RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentList identList = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body body = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgN3(ident,identList,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Prog ::= PROG IDENT Body 
            {
              Prog RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body body = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgN4(ident,body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= TYPE IdentList 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentList identList = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Decl_ReglaProd(type,identList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LDecl ::= Decl PC 
            {
              LDecl RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LDecl_ReglaProd1(decl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LDecl ::= Decl PC LDecl 
            {
              LDecl RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LDecl ldcl = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LDecl_ReglaProd2(decl , ldcl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IdentList ::= IDENT 
            {
              IdentList RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdentList_ReglaProd1(ident); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IdentList ::= IDENT COMA IdentList 
            {
              IdentList RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdentList identList = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdentList_ReglaProd2(ident , identList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Body ::= BEGIN StatementList END PC 
            {
              Body RESULT =null;
		int StListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int StListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList StList = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Body_ReglaProd(StList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= Statement PC 
            {
              StatementList RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StatementList_ReglaProd1(statement); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement PC StatementList 
            {
              StatementList RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int StListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int StListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList StList = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatementList_ReglaProd2(statement , StList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IDENT ASIG Exp 
            {
              Statement RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement_ReglaProd1(ident , expresion);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= PRINT PAREN Exp TESIS 
            {
              Statement RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Statement_ReglaProd2(expresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= IF Exp THEN StatementList END 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList statement = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Statement_ReglaProd3(exp, statement); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= IF Exp THEN StatementList ELSE StatementList END 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statement1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statement1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList statement1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statement2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statement2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList statement2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Statement_ReglaProd4(exp, statement1,statement2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= REPEAT StatementList UNTIL Exp 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList statement = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Statement_ReglaProd5(statement,expresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= IDENT 
            {
              Exp RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_Identificador(ident); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_EntreParentesis(expresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= CINT 
            {
              Exp RESULT =null;
		int ctedecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctedecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer ctedecimal = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_NDecimal(ctedecimal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_MAS(expresion1 , expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_MENOS(expresion1 , expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= Exp MUL Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_MUL(expresion1 , expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= MENOS Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_Opuesto(expresion1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= PENT PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int subExpresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subExpresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp subExpresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_ParteEntera(subExpresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= NUM PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int subExpresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subExpresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp subExpresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_Numerador(subExpresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= DEN PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int subExpresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subExpresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp subExpresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_Denominador(subExpresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_DivisionRational(expresion1,expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= CSTR 
            {
              Exp RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_String(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= INT2STR PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int subExpresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subExpresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp subExpresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_int2str(subExpresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Q2STR PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int subExpresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subExpresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp subExpresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_q2str(subExpresion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Q2STRD PAREN Exp COMA CINT TESIS 
            {
              Exp RESULT =null;
		int subExpresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int subExpresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp subExpresion = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ctedecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ctedecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer ctedecimal = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp_q2strdecimal(subExpresion,ctedecimal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= CLOG 
            {
              Exp RESULT =null;
		int cteboolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteboolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ctebool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_ctebool(ctebool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= Exp AND Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_AND(expresion1,expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp OR Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_OR(expresion1,expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_NOT(expresion1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp IGUAL Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_Igual(expresion1,expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp MAYOR Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_Mayor(expresion1,expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= Exp MENOR Exp 
            {
              Exp RESULT =null;
		int expresion1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expresion1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expresion2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Exp_Menor(expresion1,expresion2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
