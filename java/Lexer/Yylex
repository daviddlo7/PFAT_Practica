package Lexer;

import Errors.LexerException;
import Parser.sym;

%%
%{
private java_cup.runtime.Symbol tok(int k, Object value) {
 //System.out.println("Token: " + k);
  return new java_cup.runtime.Symbol(k, yyline, 0, value); 
}
%}

%public
%cup
%line
%yylexthrow{
LexerException
%yylexthrow} 
%eofval{
{return tok(sym.EOF, null); }
%eofval}

letra= [a-zA-Z]


%%

begin		{return tok(sym.BEGIN, null); }
and		{return tok(sym.AND, null); }
or		{return tok(sym.OR, null); }
not		{return tok(sym.NOT, null); }
pf2021		{return tok(sym.PROG, null); }
decl		{return tok(sym.DECL, null); }
repeat		{return tok(sym.REPEAT, null); }
until		{return tok(sym.UNTIL, null); }
print		{return tok(sym.PRINT, null); }
int2str		{return tok(sym.INT2STR, null); }
parte"."entera		{return tok(sym.PENT, null); }
numerador		{return tok(sym.NUM, null); }
denominador		{return tok(sym.DEN, null); }
q2str		{return tok(sym.Q2STR, null); }
q2str"."decimal		{return tok(sym.Q2STRD, null); }
if		{return tok(sym.IF, null); }
then		{return tok(sym.THEN, null); }
else		{return tok(sym.ELSE, null); }
end		{return tok(sym.END, null); }



int		{return tok(sym.TYPE, new Integer(0)); }
bool		{return tok(sym.TYPE, new Integer(1)); }
str		{return tok(sym.TYPE, new Integer(2)); }
rational		{return tok(sym.TYPE, new Integer(3)); }


";"		{return tok(sym.PC, null); }
":="		{return tok(sym.ASIG, null); }
"<"		{return tok(sym.MENOR, null); }
">"		{return tok(sym.MAYOR, null); }   
"+"		{return tok(sym.MAS, null); }
"-"		{return tok(sym.MENOS, null); }
"/"		{return tok(sym.DIV, null); }
"*"		{return tok(sym.MUL, null); }
"("		{return tok(sym.PAREN, null); }
")"		{return tok(sym.TESIS, null); }
"="		{return tok(sym.IGUAL, null); }
","		{return tok(sym.COMA, null); }

false		{return tok(sym.CLOG, new Boolean(false)); }
true		{return tok(sym.CLOG,  new Boolean(true)); }

{letra}({letra}|[0-9])*		{return tok(sym.IDENT, yytext()); }
[0-9]+		{return tok(sym.CINT,  new Integer(yytext())); }

(\")([^\"]|\\\")*(\")		{return tok(sym.CSTR, yytext()); }

(" "|\t|\r|\n)+	{ }
.		{ throw new LexerException("Error de sintaxis (consumir token Yylex, en la linea: " + yyline);}